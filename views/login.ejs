<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8" />
  <title>Login / Signup | PDF Chatbot</title>
  <meta name="viewport" content="width=device-width, initial-scale=1" />
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet" />
  <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" rel="stylesheet">
  <link rel="icon" type="image/x-icon" href="/images/favicon.ico">

  <style>
    :root {
      /* Light theme (default) */
      --bg-color: #f8f9fa;
      --text-color: #2c3e50;
      --primary-color: #0d6efd;
      --success-color: #198754;
      --card-bg: white;
      --input-bg: white;
      --input-border: #dee2e6;
      --input-text: #2c3e50;
      --shadow-color: rgba(0, 0, 0, 0.12);
    }

    /* Dark theme */
    [data-theme="dark"] {
      --bg-color: #1a1a1a;
      --text-color: #e1e1e1;
      --primary-color: #3b82f6;
      --success-color: #22c55e;
      --card-bg: #2d2d2d;
      --input-bg: #333333;
      --input-border: #404040;
      --input-text: #e1e1e1;
      --shadow-color: rgba(0, 0, 0, 0.3);
    }

    html, body {
      height: 100%;
      margin: 0;
      padding: 0;
      overflow: hidden;
    }

    body {
      background-color: var(--bg-color);
      font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, sans-serif;
      min-height: 100%;
      display: flex;
      align-items: center;
      justify-content: center;
      transition: background-color 0.3s ease, color 0.3s ease;
    }

    .theme-toggle {
      position: fixed;
      top: 1rem;
      right: 1rem;
      z-index: 1050;
      width: 40px;
      height: 40px;
      border-radius: 50%;
      background: var(--primary-color);
      color: white;
      border: none;
      display: flex;
      align-items: center;
      justify-content: center;
      cursor: pointer;
      transition: all 0.3s ease;
      box-shadow: 0 2px 5px var(--shadow-color);
    }

    .theme-toggle:hover {
      transform: scale(1.1);
    }

    .theme-toggle i {
      font-size: 1.2rem;
    }

    .card-container {
      width: min(90%, 400px);
      height: min-content;
      position: relative;
    }

    .form-card {
      position: absolute;
      inset: 0;
      width: 100%;
      background: var(--card-bg);
      border-radius: 1rem;
      box-shadow: 0 8px 24px var(--shadow-color);
      padding: clamp(1.5rem, 5vw, 2.5rem);
      opacity: 0;
      visibility: hidden;
      transition: all 0.5s cubic-bezier(0.4, 0, 0.2, 1);
      transform: translateX(100%) scale(0.95);
      color: var(--text-color);
    }

    .form-card.active {
      opacity: 1;
      visibility: visible;
      transform: translateX(0) scale(1);
      position: relative;
    }

    .form-card.exit-left {
      transform: translateX(-100%) scale(0.95);
    }

    /* Form elements styling */
    .form-card h4 {
      font-size: clamp(1.25rem, 4vw, 1.5rem);
      margin-bottom: 1.5rem;
      color: var(--text-color);
    }

    .form-control {
      font-size: clamp(0.875rem, 2vw, 1rem);
      padding: 0.75rem 1rem;
      border-radius: 0.5rem;
      border: 1.5px solid var(--input-border);
      background-color: var(--input-bg);
      color: var(--input-text);
      transition: all 0.2s ease;
      width: 100%;
    }

    .form-control:focus {
      border-color: var(--primary-color);
      box-shadow: 0 0 0 0.2rem rgba(13, 110, 253, 0.15);
      outline: none;
      background-color: var(--input-bg);
      color: var(--input-text);
    }

    .form-label {
      font-size: clamp(0.875rem, 2vw, 1rem);
      font-weight: 500;
      color: var(--text-color);
      margin-bottom: 0.375rem;
      display: block;
    }

    .btn {
      font-size: clamp(0.875rem, 2vw, 1rem);
      padding: 0.75rem 1.5rem;
      border-radius: 0.5rem;
      font-weight: 600;
      transition: all 0.2s ease;
      width: 100%;
      border: none;
    }

    .btn-primary {
      background-color: var(--primary-color);
      color: white;
    }

    .btn-primary:hover {
      background-color: var(--primary-color);
      filter: brightness(1.1);
      transform: translateY(-1px);
    }

    .btn-success {
      background-color: var(--success-color);
      color: white;
    }

    .btn-success:hover {
      background-color: var(--success-color);
      filter: brightness(1.1);
      transform: translateY(-1px);
    }

    /* Alert styling */
    .alert {
      font-size: clamp(0.813rem, 2vw, 0.875rem);
      padding: 0.75rem 1rem;
      margin-bottom: 1rem;
      border-radius: 0.5rem;
      background-color: var(--card-bg);
      border: 1px solid var(--input-border);
      color: var(--text-color);
    }

    .alert-danger {
      background-color: rgba(220, 53, 69, 0.1);
      border-color: rgba(220, 53, 69, 0.2);
      color: #dc3545;
    }

    .text-center {
      font-size: clamp(0.875rem, 2vw, 1rem);
      margin-top: 1rem;
      margin-bottom: 0;
      color: var(--text-color);
    }

    .switch-link {
      color: var(--primary-color);
      cursor: pointer;
      text-decoration: underline;
      transition: all 0.2s ease;
    }

    .switch-link:hover {
      filter: brightness(1.1);
      text-decoration: none;
    }

    /* Responsive adjustments */
    @media (max-width: 480px) {
      .form-card {
        padding: 1.25rem;
      }
    }

    @media (max-height: 600px) {
      .form-card {
        padding: 1rem;
      }
      
      .mb-3 {
        margin-bottom: 0.5rem !important;
      }
    }
  </style>

  <script>
    // Theme initialization
    (function() {
      // Check if user has a saved preference
      const savedTheme = localStorage.getItem('theme');
      if (savedTheme) {
        document.documentElement.setAttribute('data-theme', savedTheme);
      } else {
        // Check system preference
        if (window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches) {
          document.documentElement.setAttribute('data-theme', 'dark');
          localStorage.setItem('theme', 'dark');
        }
      }

      // Listen for system theme changes
      window.matchMedia('(prefers-color-scheme: dark)').addEventListener('change', e => {
        if (!localStorage.getItem('theme')) { // Only if user hasn't set a preference
          const newTheme = e.matches ? 'dark' : 'light';
          document.documentElement.setAttribute('data-theme', newTheme);
        }
      });
    })();
  </script>
</head>

<body>
  <!-- Theme Toggle Button -->
  <button class="theme-toggle" id="themeToggle" aria-label="Toggle theme">
    <i class="theme-icon">ðŸŒž</i>
  </button>

  <script>
    function switchTo(mode) {
      const loginCard = document.getElementById("loginCard");
      const signupCard = document.getElementById("signupCard");

      if (mode === "signup") {
        loginCard.classList.remove("active");
        loginCard.classList.add("exit-left");
        signupCard.classList.add("active");
        signupCard.classList.remove("exit-left");
      } else {
        signupCard.classList.remove("active");
        signupCard.classList.add("exit-left");
        loginCard.classList.add("active");
        loginCard.classList.remove("exit-left");
      }
    }

    // Theme toggle functionality
    document.addEventListener('DOMContentLoaded', function() {
      const themeToggle = document.getElementById('themeToggle');
      const themeIcon = document.querySelector('.theme-icon');
      
      if(themeToggle && themeIcon) {
        // Set initial icon based on current theme
        const currentTheme = document.documentElement.getAttribute('data-theme');
        themeIcon.textContent = currentTheme === 'dark' ? 'ðŸŒ™' : 'ðŸŒž';

        themeToggle.addEventListener('click', function() {
          const currentTheme = document.documentElement.getAttribute('data-theme');
          const newTheme = currentTheme === 'dark' ? 'light' : 'dark';
          document.documentElement.setAttribute('data-theme', newTheme);
          localStorage.setItem('theme', newTheme);
          themeIcon.textContent = newTheme === 'dark' ? 'ðŸŒ™' : 'ðŸŒž';
        });
      }
    });
  </script>

  <div class="card-container">
    <!-- Login Card -->
    <div id="loginCard" class="card p-4 form-card active">
      <h4 class="mb-3">Login to PDF Chat</h4>
      <form id="loginForm">
        <div class="mb-3">
          <label for="loginEmail" class="form-label">Email</label>
          <input type="email" class="form-control" name="email" id="loginEmail" required />
        </div>
        <div class="mb-3">
          <label for="loginPassword" class="form-label">Password</label>
          <input type="password" class="form-control" name="password" id="loginPassword" required />
        </div>
        <% if(loginStatus == 2){ %>
          <div class="alert alert-danger mb-3" role="alert">
            Email or Password incorrect
          </div>
        <% } %>
        <button type="submit" class="btn btn-primary w-100">Login</button>
      </form>
      <p class="text-center mt-3">
        Don't have an account?
        <span class="switch-link" onclick="switchTo('signup')">Sign up</span>
      </p>
    </div>

    <!-- Signup Card -->
    <div id="signupCard" class="card p-4 form-card">
      <h4 class="mb-3">Create an Account</h4>
      <form id="signupForm" action="/create-user" method="post">
        <div class="mb-3">
          <label for="signupName" class="form-label">Full Name</label>
          <input type="text" name="fullName" class="form-control" id="signupName" required />
        </div>
        <div class="mb-3">
          <label for="signupEmail" class="form-label">Email</label>
          <input type="email" name="email" class="form-control" id="signupEmail" required />
        </div>
        <div class="mb-3">
          <label name="password" for="signupPassword" class="form-label">Password</label>
          <input type="password" class="form-control" id="signupPassword" required />
        </div>
        <% if(loginStatus == 1){ %>
          <script>switchTo('signup');</script>
          <div class="alert alert-danger mb-3" role="alert">
            User with this email already exits
          </div>
        <% } %>
        <button type="submit" class="btn btn-success w-100">Sign Up</button>
      </form>
      <p class="text-center mt-3">
        Already have an account?
        <span class="switch-link" onclick="switchTo('login')">Login</span>
      </p>
    </div>
  </div>

  <script>
    // Helper to show loading animation
    function showLoading(button, text) {
      button.disabled = true;
      button.innerHTML = `
        <span class="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></span>
        ${text}
      `;
    }
  
    // Signup submission
    document.getElementById("signupForm").addEventListener("submit", async function (e) {
      e.preventDefault();
  
      const signupBtn = document.querySelector("#signupForm button");
      showLoading(signupBtn, "Signing up...");
  
      const formData = {
        fullName: document.getElementById("signupName").value,
        email: document.getElementById("signupEmail").value,
        password: document.getElementById("signupPassword").value,
      };
  
      try {
        const res = await fetch("/create-user", {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify(formData),
        });
  
        if (res.redirected) {
          window.location.href = res.url; // Follows backend redirect (/, /login/1)
        } else {
          const data = await res.json();
          alert(data.status || "Something went wrong.");
        }
      } catch (err) {
        console.error("Signup Error:", err);
        alert("Failed to signup.");
      } finally {
        signupBtn.disabled = false;
        signupBtn.innerHTML = "Sign Up";
      }
    });
  
    // Login submission
    document.getElementById("loginForm").addEventListener("submit", async function (e) {
      e.preventDefault();
  
      const loginBtn = document.querySelector("#loginForm button");
      showLoading(loginBtn, "Logging in...");
  
      const formData = {
        email: document.getElementById("loginEmail").value,
        password: document.getElementById("loginPassword").value,
      };
  
      try {
        const res = await fetch("/verify-login", {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify(formData),
        });
  
        if (res.redirected) {
          window.location.href = res.url; // Should be "/" or /login/2 on error
        } else {
          const data = await res.json();
          alert(data.status || "Something went wrong.");
        }
      } catch (err) {
        console.error("Login Error:", err);
        alert("Failed to login.");
      } finally {
        loginBtn.disabled = false;
        loginBtn.innerHTML = "Login";
      }
    });
  </script>
  
</body>

</html>